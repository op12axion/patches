From a4d75faa5c2a8d964c91189f47be7f080c3540eb Mon Sep 17 00:00:00 2001
From: flandolf <66240551+flandolf@users.noreply.github.com>
Date: Thu, 4 Sep 2025 17:49:58 +1000
Subject: [PATCH] Settings: Add haptic effect style and LTPO features options

Change-Id: I24e5d6446a892248ff0452a68333599f63e533af

diff --git a/res/values/arrays.xml b/res/values/arrays.xml
index 80c3e8d2c4b..2f4a45f72b4 100644
--- a/res/values/arrays.xml
+++ b/res/values/arrays.xml
@@ -1647,4 +1647,18 @@
     <!-- Packages that will not show Display over other apps permission -->
     <string-array name="display_over_apps_permission_change_exempt">
     </string-array>
+
+    <!-- Haptic Effect Styles -->
+    <string-array name="haptic_effect_style_entries" translatable="false">
+        <item>RichTap</item>
+        <item>Crisp</item>
+        <item>Gentle</item>
+    </string-array>
+
+    <string-array name="haptic_effect_style_values" translatable="false">
+        <item>richtap</item>
+        <item>crisp</item>
+        <item>gentle</item>
+    </string-array>
+
 </resources>
diff --git a/res/values/config.xml b/res/values/config.xml
index 1177b5cb8aa..a69df2cd016 100644
--- a/res/values/config.xml
+++ b/res/values/config.xml
@@ -856,4 +856,11 @@
 
     <!-- Whether the Gaze is enabled -->
     <bool name="config_gazeEnabled">false</bool>
+
+    <!-- Show haptic styles -->
+    <bool name="config_supportHapticProfiles" translatable="false">false</bool>
+
+    <!-- Show LTOP features option -->
+    <bool name="config_supportLtpoFeatures" translatable="false">false</bool>
+    
 </resources>
diff --git a/res/values/strings.xml b/res/values/strings.xml
index 774e776022b..0aabeef28b5 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -14399,4 +14399,12 @@ Data usage charges may apply.</string>
     <!-- Title for supervision PIN verification screen [CHAR LIMIT=60] -->
     <string name="supervision_full_screen_pin_verification_title">Enter supervision PIN</string>
     <string name="accessibility_illustration_content_description"><xliff:g id="feature" example="Select to Speak">%1$s</xliff:g> animation</string>
+
+    <!-- Haptic Effect Style -->
+    <string name="haptic_effect_style_title">Haptic effect style</string>
+
+    <!-- LTPO Features -->
+    <string name="ltpo_features_title">Enable LTPO features</string>
+    <string name="ltpo_features_summary">Enables device-specific adaptive idle and frame rate features for improving efficiency</string>
+
 </resources>
diff --git a/res/xml/accessibility_vibration_intensity_settings.xml b/res/xml/accessibility_vibration_intensity_settings.xml
index a36b20b8ffd..d6cac123475 100644
--- a/res/xml/accessibility_vibration_intensity_settings.xml
+++ b/res/xml/accessibility_vibration_intensity_settings.xml
@@ -65,6 +65,13 @@
         android:key="vibration_intensity_category_haptics"
         android:title="@string/accessibility_interactive_haptics_category_title">
 
+        <com.android.settings.accessibility.HapticStyleListPreference
+            android:key="haptic_style"
+            android:title="@string/haptic_effect_style_title"
+            android:entries="@array/haptic_effect_style_entries"
+            android:entryValues="@array/haptic_effect_style_values"
+            app:controller="com.android.settings.accessibility.HapticStylePreferenceController" />
+
         <com.android.settingslib.widget.SliderPreference
             android:key="vibration_intensity_preference_touch"
             android:title="@string/accessibility_touch_vibration_title"
diff --git a/res/xml/accessibility_vibration_settings.xml b/res/xml/accessibility_vibration_settings.xml
index b8cb2305a16..8266655b7cc 100644
--- a/res/xml/accessibility_vibration_settings.xml
+++ b/res/xml/accessibility_vibration_settings.xml
@@ -65,6 +65,13 @@
         android:key="vibration_category_haptics"
         android:title="@string/accessibility_interactive_haptics_category_title">
 
+         <com.android.settings.accessibility.HapticStyleListPreference
+            android:key="haptic_style"
+            android:title="@string/haptic_effect_style_title"
+            android:entries="@array/haptic_effect_style_entries"
+            android:entryValues="@array/haptic_effect_style_values"
+            app:controller="com.android.settings.accessibility.HapticStylePreferenceController" />
+
         <SwitchPreferenceCompat
             android:key="vibration_preference_touch"
             android:title="@string/accessibility_touch_vibration_title"
diff --git a/res/xml/display_settings.xml b/res/xml/display_settings.xml
index 9855304325e..ca8810cea13 100644
--- a/res/xml/display_settings.xml
+++ b/res/xml/display_settings.xml
@@ -176,6 +176,12 @@
             android:fragment="com.android.settings.display.RefreshRateSettings"
             settings:controller="com.android.settings.display.RefreshRateSettingsPreferenceController" />
 
+        <SwitchPreferenceCompat
+            android:key="ltpo_features"
+            android:title="@string/ltpo_features_title"
+            android:summary="@string/ltpo_features_summary"
+            settings:controller="com.android.settings.display.LtpoFeaturesPreferenceController" />
+            
         <SwitchPreferenceCompat
             android:key="show_operator_name"
             android:title="@string/show_operator_name_title"
diff --git a/src/com/android/settings/accessibility/HapticStyleListPreference.java b/src/com/android/settings/accessibility/HapticStyleListPreference.java
new file mode 100644
index 00000000000..2ee30f49a91
--- /dev/null
+++ b/src/com/android/settings/accessibility/HapticStyleListPreference.java
@@ -0,0 +1,23 @@
+package com.android.settings.accessibility;
+
+import android.content.Context;
+import android.os.SystemProperties;
+import android.provider.Settings;
+import android.util.AttributeSet;
+import androidx.preference.ListPreference;
+
+public class HapticStyleListPreference extends ListPreference {
+    private static final String PROP_KEY = "persist.sys.haptic_profile";
+    private static final String SETTINGS_KEY = Settings.Secure.HAPTIC_EFFECTS_PROFILE;
+
+    public HapticStyleListPreference(Context context, AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+    @Override
+    public void setValue(String value) {
+        super.setValue(value);
+        SystemProperties.set(PROP_KEY, value);
+	Settings.Secure.putString(getContext().getContentResolver(), SETTINGS_KEY, value);
+    }
+}
\ No newline at end of file
diff --git a/src/com/android/settings/accessibility/HapticStylePreferenceController.java b/src/com/android/settings/accessibility/HapticStylePreferenceController.java
new file mode 100644
index 00000000000..3698115f7d8
--- /dev/null
+++ b/src/com/android/settings/accessibility/HapticStylePreferenceController.java
@@ -0,0 +1,79 @@
+package com.android.settings.accessibility;
+
+import android.content.Context;
+import android.os.SystemProperties;
+import android.provider.Settings;
+import androidx.preference.ListPreference;
+import androidx.preference.Preference;
+import androidx.preference.PreferenceScreen;
+
+import com.android.settings.core.BasePreferenceController;
+import com.android.settings.R;
+
+public class HapticStylePreferenceController extends BasePreferenceController
+        implements Preference.OnPreferenceChangeListener {
+
+    private static final String PROP_KEY = "debug.haptic_profile";
+    private static final String SETTINGS_KEY = Settings.Secure.HAPTIC_EFFECTS_PROFILE;
+    private ListPreference mPreference;
+
+    public HapticStylePreferenceController(Context context, String preferenceKey) {
+        super(context, preferenceKey);
+    }
+
+    @Override
+    public int getAvailabilityStatus() {
+        return mContext.getResources().getBoolean(R.bool.config_supportHapticProfiles) ? AVAILABLE : UNSUPPORTED_ON_DEVICE;
+    }
+
+    @Override
+    public void displayPreference(PreferenceScreen screen) {
+        super.displayPreference(screen);
+        Preference pref = screen.findPreference(getPreferenceKey());
+        if (pref instanceof ListPreference) {
+            mPreference = (ListPreference) pref;
+            mPreference.setOnPreferenceChangeListener(this);
+            updateState(mPreference);
+        }
+    }
+
+    @Override
+    public void updateState(Preference preference) {
+        super.updateState(preference);
+        if (preference instanceof ListPreference) {
+            ListPreference listPref = (ListPreference) preference;
+            String currentValue = Settings.Secure.getString(mContext.getContentResolver(), SETTINGS_KEY);
+
+            // If the property is empty, use the first entry value as default
+            if (currentValue == null || currentValue.isEmpty()) {
+                CharSequence[] entryValues = listPref.getEntryValues();
+                if (entryValues != null && entryValues.length > 0) {
+                    currentValue = entryValues[0].toString();
+                    listPref.setValue(currentValue);
+                    SystemProperties.set(PROP_KEY, currentValue);
+		    Settings.Secure.putString(mContext.getContentResolver(), SETTINGS_KEY, currentValue);
+                }
+            } else {
+                listPref.setValue(currentValue);
+            }
+
+            int index = listPref.findIndexOfValue(currentValue);
+            if (index >= 0) {
+                preference.setSummary(listPref.getEntries()[index]);
+            }
+        }
+    }
+
+    @Override
+    public boolean onPreferenceChange(Preference preference, Object newValue) {
+        if (!(preference instanceof ListPreference)) return false;
+        String value = (String) newValue;
+        SystemProperties.set(PROP_KEY, value);
+        Settings.Secure.putString(mContext.getContentResolver(), SETTINGS_KEY, value);
+        int index = mPreference.findIndexOfValue(value);
+        if (index >= 0) {
+            mPreference.setSummary(mPreference.getEntries()[index]);
+        }
+        return true;
+    }
+}
\ No newline at end of file
diff --git a/src/com/android/settings/display/LtpoFeaturesPreferenceController.java b/src/com/android/settings/display/LtpoFeaturesPreferenceController.java
new file mode 100644
index 00000000000..4b84dff73c2
--- /dev/null
+++ b/src/com/android/settings/display/LtpoFeaturesPreferenceController.java
@@ -0,0 +1,61 @@
+/*
+ * Copyright (C) 2021 The Proton AOSP Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.display;
+
+import android.content.Context;
+import android.os.SystemProperties;
+import android.provider.Settings;
+
+import com.android.settings.core.TogglePreferenceController;
+import com.android.settings.R;
+
+public class LtpoFeaturesPreferenceController extends TogglePreferenceController {
+
+    // Settings can only set the debug.* property, so we need to persist it
+    // in system settings. Match the stock setting name for backup compatibility.
+    private static final String SETTINGS_KEY = Settings.Secure.LTPO_FEATURES_ENABLED;
+    private static final String PROP_NAME = "debug.ltpo_features";
+
+    public LtpoFeaturesPreferenceController(Context context, String preferenceKey) {
+        super(context, preferenceKey);
+    }
+
+    @Override
+    public int getAvailabilityStatus() {
+        return mContext.getResources().getBoolean(R.bool.config_supportLtpoFeatures)
+            ? AVAILABLE
+            : UNSUPPORTED_ON_DEVICE;
+    }
+
+    @Override
+    public boolean setChecked(boolean value) {
+        Settings.Secure.putInt(mContext.getContentResolver(), SETTINGS_KEY, value ? 1 : 0);
+        SystemProperties.set(PROP_NAME, value ? "1" : "0");
+        return true;
+    }
+
+    @Override
+    public boolean isChecked() {
+        // debug prop isn't persistent
+        return Settings.Secure.getInt(mContext.getContentResolver(), SETTINGS_KEY, 0) == 1;
+    }
+
+    @Override
+    public int getSliceHighlightMenuRes() {
+        return R.string.menu_key_display;
+    }
+}
\ No newline at end of file
-- 
2.48.1

